{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { ToastContainer } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n// import '../assets/styles/myStyles.css';\n// import { TOAST_CONFIG, INITIAL_STATE, API_ENDPOINTS, VALIDATION_ERRORS } from '../utils/constants';\n// import ProductForm from './ProductForm';\n// import ProductList from './ProductList';\n\n// const Inventory = () => {\n//   const [products, setProducts] = useState(INITIAL_STATE.products);\n//   const [name, setName] = useState(INITIAL_STATE.name);\n//   const [quantity, setQuantity] = useState(INITIAL_STATE.quantity);\n//   const [editingProductId, setEditingProductId] = useState(INITIAL_STATE.editingProductId);\n//   const [errors, setErrors] = useState(INITIAL_STATE.errors);\n\n//   useEffect(() => {// useEffect to fetch products when the component mounts\n//     fetchProducts();\n//   }, []);\n\n//   const fetchProducts = async () => {// fetch products from the API endpoint\n//     try {\n//       const res = await axios.get(API_ENDPOINTS.fetchProducts);\n//       setProducts(res.data);\n//     } catch (error) {\n//       console.error('Error fetching products:', error);\n//       TOAST_CONFIG.error('Error fetching products');\n//     }\n//   };\n\n//   const sendNotification = async (productId) => {// send notification email using the API endpoint\n//     try {\n//       const res = await axios.post(API_ENDPOINTS.sendNotification(productId));\n//       TOAST_CONFIG.success(res.data.message);\n//     } catch (error) {\n//       console.error('Error sending notification email:', error);\n//       TOAST_CONFIG.error('Error sending notification email');\n//     }\n//   };\n\n//   const validateForm = () => {// validate form inputs \n//     const errors = {};\n//     if (name.trim().length < 3) {\n//       errors.name = VALIDATION_ERRORS.name;\n//       TOAST_CONFIG.error(VALIDATION_ERRORS.name);\n//     }\n//     if (quantity < 0) {\n//       errors.quantity = VALIDATION_ERRORS.quantity;\n//       TOAST_CONFIG.error(VALIDATION_ERRORS.quantity);\n//     }\n//     setErrors(errors);\n//     return Object.keys(errors).length === 0;\n//   };\n\n//   const addProduct = async () => {// add product to the API endpoint\n//     if (!validateForm()) return;\n\n//     try {\n//       const product = { name, quantity };\n//       const res = await axios.post(API_ENDPOINTS.addProduct, product);\n//       setProducts([...products, res.data]);\n//       resetForm();\n//       TOAST_CONFIG.success('Product added successfully');\n//     } catch (error) {\n//       console.error('Error adding product:', error);\n//       TOAST_CONFIG.error('Error adding product');\n//     }\n//   };\n\n//   const updateProduct = async (id) => {// update product in the API endpoint\n//     if (!validateForm()) return;\n\n//     try {\n//       const product = { name, quantity };\n//       await axios.put(API_ENDPOINTS.updateProduct(id), product);\n//       fetchProducts();\n//       resetForm();\n//       TOAST_CONFIG.success('Product updated successfully');\n//     } catch (error) {\n//       console.error('Error updating product:', error);\n//       TOAST_CONFIG.error('Error updating product');\n//     }\n//   };\n\n//   const increaseQuantity = async (id) => {// increase product quantity in the API endpoint\n//     try {\n//       await axios.patch(API_ENDPOINTS.increaseQuantity(id));\n//       fetchProducts();\n//       TOAST_CONFIG.success('Quantity increased successfully');\n//     } catch (error) {\n//       console.error('Error increasing quantity:', error);\n//       TOAST_CONFIG.error('Error increasing quantity');\n//     }\n//   };\n\n//   const decreaseQuantity = async (id) => {// decrease product quantity in the API endpoint\n//     try {\n//       await axios.patch(API_ENDPOINTS.decreaseQuantity(id));\n//       fetchProducts();\n//       TOAST_CONFIG.success('Quantity decreased successfully');\n//     } catch (error) {\n//       console.error('Error decreasing quantity:', error);\n//       TOAST_CONFIG.error('Error decreasing quantity');\n//     }\n//   };\n\n//   const deleteProduct = async (id) => {// delete product from the API endpoint\n//     try {\n//       await axios.delete(API_ENDPOINTS.deleteProduct(id));\n//       setProducts(products.filter((product) => product._id !== id));\n//       TOAST_CONFIG.success('Product deleted successfully');\n//     } catch (error) {\n//       console.error('Error deleting product:', error);\n//       TOAST_CONFIG.error('Error deleting product');\n//     }\n//   };\n\n//   const editProduct = (product) => {// edit product in the form\n//     setName(product.name);\n//     setQuantity(product.quantity);\n//     setEditingProductId(product._id);\n//   };\n\n//   const resetForm = () => {// reset form inputs\n//     setName(INITIAL_STATE.name);\n//     setQuantity(INITIAL_STATE.quantity);\n//     setEditingProductId(INITIAL_STATE.editingProductId);\n//     setErrors(INITIAL_STATE.errors);\n//   };\n\n//   const handleSave = () => {// handle form submission\n//     if (editingProductId) {\n//       updateProduct(editingProductId);\n//     } else {\n//       addProduct();\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <ToastContainer />\n//       <h1 className=\"header\">Inventory Management System</h1>\n//       <ProductForm\n//         name={name}\n//         quantity={quantity}\n//         errors={errors}\n//         setName={setName}\n//         setQuantity={setQuantity}\n//         handleSave={handleSave}\n//         resetForm={resetForm}\n//         fetchProducts={fetchProducts}\n//         editingProductId={editingProductId}\n//       />\n//       <h2 className=\"header\">Products</h2>\n//       <ProductList\n//         products={products}\n//         increaseQuantity={increaseQuantity}\n//         decreaseQuantity={decreaseQuantity}\n//         editProduct={editProduct}\n//         deleteProduct={deleteProduct}\n//         sendNotification={sendNotification}\n//       />\n//     </div>\n//   );\n// };\n\n// export default Inventory;","map":{"version":3,"names":[],"sources":["D:/CTD-LABS-App/frontend/src/components/Inventory.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { ToastContainer } from 'react-toastify';\r\n// import 'react-toastify/dist/ReactToastify.css';\r\n// import '../assets/styles/myStyles.css';\r\n// import { TOAST_CONFIG, INITIAL_STATE, API_ENDPOINTS, VALIDATION_ERRORS } from '../utils/constants';\r\n// import ProductForm from './ProductForm';\r\n// import ProductList from './ProductList';\r\n\r\n// const Inventory = () => {\r\n//   const [products, setProducts] = useState(INITIAL_STATE.products);\r\n//   const [name, setName] = useState(INITIAL_STATE.name);\r\n//   const [quantity, setQuantity] = useState(INITIAL_STATE.quantity);\r\n//   const [editingProductId, setEditingProductId] = useState(INITIAL_STATE.editingProductId);\r\n//   const [errors, setErrors] = useState(INITIAL_STATE.errors);\r\n\r\n//   useEffect(() => {// useEffect to fetch products when the component mounts\r\n//     fetchProducts();\r\n//   }, []);\r\n\r\n//   const fetchProducts = async () => {// fetch products from the API endpoint\r\n//     try {\r\n//       const res = await axios.get(API_ENDPOINTS.fetchProducts);\r\n//       setProducts(res.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching products:', error);\r\n//       TOAST_CONFIG.error('Error fetching products');\r\n//     }\r\n//   };\r\n\r\n//   const sendNotification = async (productId) => {// send notification email using the API endpoint\r\n//     try {\r\n//       const res = await axios.post(API_ENDPOINTS.sendNotification(productId));\r\n//       TOAST_CONFIG.success(res.data.message);\r\n//     } catch (error) {\r\n//       console.error('Error sending notification email:', error);\r\n//       TOAST_CONFIG.error('Error sending notification email');\r\n//     }\r\n//   };\r\n\r\n//   const validateForm = () => {// validate form inputs \r\n//     const errors = {};\r\n//     if (name.trim().length < 3) {\r\n//       errors.name = VALIDATION_ERRORS.name;\r\n//       TOAST_CONFIG.error(VALIDATION_ERRORS.name);\r\n//     }\r\n//     if (quantity < 0) {\r\n//       errors.quantity = VALIDATION_ERRORS.quantity;\r\n//       TOAST_CONFIG.error(VALIDATION_ERRORS.quantity);\r\n//     }\r\n//     setErrors(errors);\r\n//     return Object.keys(errors).length === 0;\r\n//   };\r\n\r\n//   const addProduct = async () => {// add product to the API endpoint\r\n//     if (!validateForm()) return;\r\n\r\n//     try {\r\n//       const product = { name, quantity };\r\n//       const res = await axios.post(API_ENDPOINTS.addProduct, product);\r\n//       setProducts([...products, res.data]);\r\n//       resetForm();\r\n//       TOAST_CONFIG.success('Product added successfully');\r\n//     } catch (error) {\r\n//       console.error('Error adding product:', error);\r\n//       TOAST_CONFIG.error('Error adding product');\r\n//     }\r\n//   };\r\n\r\n//   const updateProduct = async (id) => {// update product in the API endpoint\r\n//     if (!validateForm()) return;\r\n\r\n//     try {\r\n//       const product = { name, quantity };\r\n//       await axios.put(API_ENDPOINTS.updateProduct(id), product);\r\n//       fetchProducts();\r\n//       resetForm();\r\n//       TOAST_CONFIG.success('Product updated successfully');\r\n//     } catch (error) {\r\n//       console.error('Error updating product:', error);\r\n//       TOAST_CONFIG.error('Error updating product');\r\n//     }\r\n//   };\r\n\r\n//   const increaseQuantity = async (id) => {// increase product quantity in the API endpoint\r\n//     try {\r\n//       await axios.patch(API_ENDPOINTS.increaseQuantity(id));\r\n//       fetchProducts();\r\n//       TOAST_CONFIG.success('Quantity increased successfully');\r\n//     } catch (error) {\r\n//       console.error('Error increasing quantity:', error);\r\n//       TOAST_CONFIG.error('Error increasing quantity');\r\n//     }\r\n//   };\r\n\r\n//   const decreaseQuantity = async (id) => {// decrease product quantity in the API endpoint\r\n//     try {\r\n//       await axios.patch(API_ENDPOINTS.decreaseQuantity(id));\r\n//       fetchProducts();\r\n//       TOAST_CONFIG.success('Quantity decreased successfully');\r\n//     } catch (error) {\r\n//       console.error('Error decreasing quantity:', error);\r\n//       TOAST_CONFIG.error('Error decreasing quantity');\r\n//     }\r\n//   };\r\n\r\n//   const deleteProduct = async (id) => {// delete product from the API endpoint\r\n//     try {\r\n//       await axios.delete(API_ENDPOINTS.deleteProduct(id));\r\n//       setProducts(products.filter((product) => product._id !== id));\r\n//       TOAST_CONFIG.success('Product deleted successfully');\r\n//     } catch (error) {\r\n//       console.error('Error deleting product:', error);\r\n//       TOAST_CONFIG.error('Error deleting product');\r\n//     }\r\n//   };\r\n\r\n//   const editProduct = (product) => {// edit product in the form\r\n//     setName(product.name);\r\n//     setQuantity(product.quantity);\r\n//     setEditingProductId(product._id);\r\n//   };\r\n\r\n//   const resetForm = () => {// reset form inputs\r\n//     setName(INITIAL_STATE.name);\r\n//     setQuantity(INITIAL_STATE.quantity);\r\n//     setEditingProductId(INITIAL_STATE.editingProductId);\r\n//     setErrors(INITIAL_STATE.errors);\r\n//   };\r\n\r\n//   const handleSave = () => {// handle form submission\r\n//     if (editingProductId) {\r\n//       updateProduct(editingProductId);\r\n//     } else {\r\n//       addProduct();\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <ToastContainer />\r\n//       <h1 className=\"header\">Inventory Management System</h1>\r\n//       <ProductForm\r\n//         name={name}\r\n//         quantity={quantity}\r\n//         errors={errors}\r\n//         setName={setName}\r\n//         setQuantity={setQuantity}\r\n//         handleSave={handleSave}\r\n//         resetForm={resetForm}\r\n//         fetchProducts={fetchProducts}\r\n//         editingProductId={editingProductId}\r\n//       />\r\n//       <h2 className=\"header\">Products</h2>\r\n//       <ProductList\r\n//         products={products}\r\n//         increaseQuantity={increaseQuantity}\r\n//         decreaseQuantity={decreaseQuantity}\r\n//         editProduct={editProduct}\r\n//         deleteProduct={deleteProduct}\r\n//         sendNotification={sendNotification}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Inventory;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}